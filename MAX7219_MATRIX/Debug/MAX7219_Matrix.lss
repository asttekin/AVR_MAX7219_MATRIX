
MAX7219_Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001556  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ff  00000000  00000000  00001fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000961  00000000  00000000  000029b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  0000331c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005aa  00000000  00000000  00003510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6d  00000000  00000000  00003aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004827  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 01 	jmp	0x288	; 0x288 <__ctors_end>
   4:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
   8:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
   c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  10:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  14:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  18:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  1c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  20:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  24:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  28:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  2c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  30:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  34:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  38:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  3c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  40:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  44:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  48:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  4c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  50:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  54:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  58:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  5c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  60:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
  64:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>

00000068 <Atoz>:
  68:	00 3c 66 66 7e 66 66 66 00 3e 66 66 3e 66 66 3e     .<ff~fff.>ff>ff>
  78:	00 3c 66 06 06 06 66 3c 00 3e 66 66 66 66 66 3e     .<f...f<.>fffff>
  88:	00 7e 06 06 3e 06 06 7e 00 7e 06 06 3e 06 06 06     .~..>..~.~..>...
  98:	00 3c 66 06 06 76 66 3c 00 66 66 66 7e 66 66 66     .<f..vf<.fff~fff
  a8:	00 3c 18 18 18 18 18 3c 00 78 30 30 30 36 36 1c     .<.....<.x00066.
  b8:	00 66 36 1e 0e 1e 36 66 00 06 06 06 06 06 06 7e     .f6...6f.......~
  c8:	00 c6 ee fe d6 c6 c6 c6 00 c6 ce de f6 e6 c6 c6     ................
  d8:	00 3c 66 66 66 66 66 3c 00 3e 66 66 66 3e 06 06     .<fffff<.>fff>..
  e8:	00 3c 66 66 66 76 3c 60 00 3e 66 66 3e 1e 36 66     .<fffv<`.>ff>.6f
  f8:	00 3c 66 06 3c 60 66 3c 00 7e 5a 18 18 18 18 18     .<f.<`f<.~Z.....
 108:	00 66 66 66 66 66 66 7c 00 66 66 66 66 66 3c 18     .ffffff|.fffff<.
 118:	00 c6 c6 c6 d6 fe ee c6 00 c6 c6 6c 38 6c c6 c6     ...........l8l..
 128:	00 66 66 66 3c 18 18 18 00 7e 60 30 18 0c 06 7e     .fff<....~`0...~
	...
 140:	00 00 00 3c 60 7c 66 7c 00 06 06 06 3e 66 66 3e     ...<`|f|....>ff>
 150:	00 00 00 3c 66 06 66 3c 00 60 60 60 7c 66 66 7c     ...<f.f<.```|ff|
 160:	00 00 00 3c 66 7e 06 3c 00 38 6c 0c 0c 3e 0c 0c     ...<f~.<.8l..>..
 170:	00 00 7c 66 66 7c 60 3c 00 06 06 06 3e 66 66 66     ..|ff|`<....>fff
 180:	00 00 18 00 18 18 18 3c 00 30 00 30 30 36 36 1c     .......<.0.0066.
 190:	00 06 06 66 36 1e 36 66 00 18 18 18 18 18 18 18     ...f6.6f........
 1a0:	00 00 00 c6 ee fe d6 d6 00 00 00 3e 7e 66 66 66     ...........>~fff
 1b0:	00 00 00 3c 66 66 66 3c 00 00 3e 66 66 3e 06 06     ...<fff<..>ff>..
 1c0:	00 00 3c 36 36 3c b0 f0 00 00 00 3e 66 66 06 06     ..<66<.....>ff..
 1d0:	00 00 00 7c 02 3c 40 3e 00 00 18 18 7e 18 18 18     ...|.<@>....~...
 1e0:	00 00 00 66 66 66 66 7c 00 00 00 00 66 66 3c 18     ...ffff|....ff<.
 1f0:	00 00 00 c6 d6 d6 d6 7c 00 00 00 66 3c 18 3c 66     .......|...f<.<f
 200:	00 00 00 66 66 7c 60 3c 00 00 00 3c 30 18 0c 3c     ...ff|`<...<0..<

00000210 <numbers>:
 210:	00 3c 66 76 6e 66 66 3c 00 18 18 1c 18 18 18 7e     .<fvnff<.......~
 220:	00 3c 66 60 30 0c 06 7e 00 3c 66 60 38 60 66 3c     .<f`0..~.<f`8`f<
 230:	00 30 38 34 32 7e 30 30 00 7e 06 3e 60 60 66 3c     .0842~00.~.>``f<
 240:	00 3c 66 06 3e 66 66 3c 00 7e 66 30 30 18 18 18     .<f.>ff<.~f00...
 250:	00 3c 66 66 3c 66 66 3c 00 3c 66 66 7c 60 66 3c     .<ff<ff<.<ff|`f<

00000260 <symbol>:
 260:	00 3c 66 60 38 18 00 18 00 44 ee fe fe 7c 38 10     .<f`8....D...|8.
 270:	00 18 28 08 08 0c 0e 06 00 10 30 7e fe 7e 30 10     ..(.......0~.~0.
 280:	00 10 18 fc fe fc 18 10                             ........

00000288 <__ctors_end>:
 288:	11 24       	eor	r1, r1
 28a:	1f be       	out	0x3f, r1	; 63
 28c:	cf ef       	ldi	r28, 0xFF	; 255
 28e:	d8 e0       	ldi	r29, 0x08	; 8
 290:	de bf       	out	0x3e, r29	; 62
 292:	cd bf       	out	0x3d, r28	; 61

00000294 <__do_clear_bss>:
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	a0 e0       	ldi	r26, 0x00	; 0
 298:	b1 e0       	ldi	r27, 0x01	; 1
 29a:	01 c0       	rjmp	.+2      	; 0x29e <.do_clear_bss_start>

0000029c <.do_clear_bss_loop>:
 29c:	1d 92       	st	X+, r1

0000029e <.do_clear_bss_start>:
 29e:	a0 32       	cpi	r26, 0x20	; 32
 2a0:	b2 07       	cpc	r27, r18
 2a2:	e1 f7       	brne	.-8      	; 0x29c <.do_clear_bss_loop>
 2a4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
 2a8:	0c 94 4d 04 	jmp	0x89a	; 0x89a <_exit>

000002ac <__bad_interrupt>:
 2ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b0 <pgm_read_64>:
	0x3c607c6666000000, /* y */
	0x3c0c18303c000000  /* z */
};

uint64_t pgm_read_64( void *ptr )
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	28 97       	sbiw	r28, 0x08	; 8
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
	uint64_t result;
	memcpy_P( &result, ptr, sizeof(uint64_t) );
 2c4:	48 e0       	ldi	r20, 0x08	; 8
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	bc 01       	movw	r22, r24
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	0e 94 44 04 	call	0x888	; 0x888 <memcpy_P>
	return result;
 2d2:	29 81       	ldd	r18, Y+1	; 0x01
 2d4:	3a 81       	ldd	r19, Y+2	; 0x02
 2d6:	4b 81       	ldd	r20, Y+3	; 0x03
 2d8:	5c 81       	ldd	r21, Y+4	; 0x04
 2da:	6d 81       	ldd	r22, Y+5	; 0x05
 2dc:	7e 81       	ldd	r23, Y+6	; 0x06
}
 2de:	8f 81       	ldd	r24, Y+7	; 0x07
 2e0:	98 85       	ldd	r25, Y+8	; 0x08
 2e2:	28 96       	adiw	r28, 0x08	; 8
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <main>:

int main(void)
{
	MAX7219_MatrixInit();
 2f4:	0e 94 30 03 	call	0x660	; 0x660 <MAX7219_MatrixInit>
	MAX7219_MatrixUpdate();		
 2f8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
			
    /* Replace with your application code */
    while (1) 
    {
		MAX7219_MatrixSetRow64(0, pgm_read_64(&symbol[0]));
 2fc:	80 e6       	ldi	r24, 0x60	; 96
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 304:	02 2f       	mov	r16, r18
 306:	13 2f       	mov	r17, r19
 308:	24 2f       	mov	r18, r20
 30a:	35 2f       	mov	r19, r21
 30c:	46 2f       	mov	r20, r22
 30e:	57 2f       	mov	r21, r23
 310:	68 2f       	mov	r22, r24
 312:	79 2f       	mov	r23, r25
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, pgm_read_64(&symbol[0]));
 31a:	80 e6       	ldi	r24, 0x60	; 96
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 322:	02 2f       	mov	r16, r18
 324:	13 2f       	mov	r17, r19
 326:	24 2f       	mov	r18, r20
 328:	35 2f       	mov	r19, r21
 32a:	46 2f       	mov	r20, r22
 32c:	57 2f       	mov	r21, r23
 32e:	68 2f       	mov	r22, r24
 330:	79 2f       	mov	r23, r25
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(2, pgm_read_64(&symbol[0]));
 338:	80 e6       	ldi	r24, 0x60	; 96
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 340:	02 2f       	mov	r16, r18
 342:	13 2f       	mov	r17, r19
 344:	24 2f       	mov	r18, r20
 346:	35 2f       	mov	r19, r21
 348:	46 2f       	mov	r20, r22
 34a:	57 2f       	mov	r21, r23
 34c:	68 2f       	mov	r22, r24
 34e:	79 2f       	mov	r23, r25
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, pgm_read_64(&symbol[0]));		
 356:	80 e6       	ldi	r24, 0x60	; 96
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 35e:	02 2f       	mov	r16, r18
 360:	13 2f       	mov	r17, r19
 362:	24 2f       	mov	r18, r20
 364:	35 2f       	mov	r19, r21
 366:	46 2f       	mov	r20, r22
 368:	57 2f       	mov	r21, r23
 36a:	68 2f       	mov	r22, r24
 36c:	79 2f       	mov	r23, r25
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();		
 374:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	83 e2       	ldi	r24, 0x23	; 35
 37c:	94 ef       	ldi	r25, 0xF4	; 244
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x8a>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x94>
 388:	00 00       	nop
		_delay_ms(5000);
						
		MAX7219_MatrixSetRow64(0, pgm_read_64(&numbers[0]));			
 38a:	80 e1       	ldi	r24, 0x10	; 16
 38c:	92 e0       	ldi	r25, 0x02	; 2
 38e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 392:	02 2f       	mov	r16, r18
 394:	13 2f       	mov	r17, r19
 396:	24 2f       	mov	r18, r20
 398:	35 2f       	mov	r19, r21
 39a:	46 2f       	mov	r20, r22
 39c:	57 2f       	mov	r21, r23
 39e:	68 2f       	mov	r22, r24
 3a0:	79 2f       	mov	r23, r25
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();		
 3a8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	83 ed       	ldi	r24, 0xD3	; 211
 3b0:	90 e3       	ldi	r25, 0x30	; 48
 3b2:	21 50       	subi	r18, 0x01	; 1
 3b4:	80 40       	sbci	r24, 0x00	; 0
 3b6:	90 40       	sbci	r25, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <main+0xbe>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <main+0xc8>
 3bc:	00 00       	nop
		_delay_ms(1000);	
		
		MAX7219_MatrixSetRow64(1, pgm_read_64(&numbers[3]));		
 3be:	88 e2       	ldi	r24, 0x28	; 40
 3c0:	92 e0       	ldi	r25, 0x02	; 2
 3c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 3c6:	02 2f       	mov	r16, r18
 3c8:	13 2f       	mov	r17, r19
 3ca:	24 2f       	mov	r18, r20
 3cc:	35 2f       	mov	r19, r21
 3ce:	46 2f       	mov	r20, r22
 3d0:	57 2f       	mov	r21, r23
 3d2:	68 2f       	mov	r22, r24
 3d4:	79 2f       	mov	r23, r25
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 3dc:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	83 ed       	ldi	r24, 0xD3	; 211
 3e4:	90 e3       	ldi	r25, 0x30	; 48
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0xf2>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0xfc>
 3f0:	00 00       	nop
		_delay_ms(1000);
		
		MAX7219_MatrixSetRow64(2, pgm_read_64(&numbers[2]));		
 3f2:	80 e2       	ldi	r24, 0x20	; 32
 3f4:	92 e0       	ldi	r25, 0x02	; 2
 3f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 3fa:	02 2f       	mov	r16, r18
 3fc:	13 2f       	mov	r17, r19
 3fe:	24 2f       	mov	r18, r20
 400:	35 2f       	mov	r19, r21
 402:	46 2f       	mov	r20, r22
 404:	57 2f       	mov	r21, r23
 406:	68 2f       	mov	r22, r24
 408:	79 2f       	mov	r23, r25
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 410:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
 414:	2f ef       	ldi	r18, 0xFF	; 255
 416:	83 ed       	ldi	r24, 0xD3	; 211
 418:	90 e3       	ldi	r25, 0x30	; 48
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	80 40       	sbci	r24, 0x00	; 0
 41e:	90 40       	sbci	r25, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
		_delay_ms(1000);
		
		MAX7219_MatrixSetRow64(3, pgm_read_64(&numbers[9]));		
 426:	88 e5       	ldi	r24, 0x58	; 88
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 42e:	02 2f       	mov	r16, r18
 430:	13 2f       	mov	r17, r19
 432:	24 2f       	mov	r18, r20
 434:	35 2f       	mov	r19, r21
 436:	46 2f       	mov	r20, r22
 438:	57 2f       	mov	r21, r23
 43a:	68 2f       	mov	r22, r24
 43c:	79 2f       	mov	r23, r25
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();			
 444:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	83 ed       	ldi	r24, 0xD3	; 211
 44c:	90 e3       	ldi	r25, 0x30	; 48
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
		_delay_ms(1000);
		
		MAX7219_MatrixSetRow64(0, pgm_read_64(&Atoz['I'- 65]));
 45a:	88 ea       	ldi	r24, 0xA8	; 168
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 462:	02 2f       	mov	r16, r18
 464:	13 2f       	mov	r17, r19
 466:	24 2f       	mov	r18, r20
 468:	35 2f       	mov	r19, r21
 46a:	46 2f       	mov	r20, r22
 46c:	57 2f       	mov	r21, r23
 46e:	68 2f       	mov	r22, r24
 470:	79 2f       	mov	r23, r25
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(1, pgm_read_64(&symbol[1]));
 478:	88 e6       	ldi	r24, 0x68	; 104
 47a:	92 e0       	ldi	r25, 0x02	; 2
 47c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 480:	02 2f       	mov	r16, r18
 482:	13 2f       	mov	r17, r19
 484:	24 2f       	mov	r18, r20
 486:	35 2f       	mov	r19, r21
 488:	46 2f       	mov	r20, r22
 48a:	57 2f       	mov	r21, r23
 48c:	68 2f       	mov	r22, r24
 48e:	79 2f       	mov	r23, r25
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(2, pgm_read_64(&Atoz['Y' - 65]));
 496:	88 e2       	ldi	r24, 0x28	; 40
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 49e:	02 2f       	mov	r16, r18
 4a0:	13 2f       	mov	r17, r19
 4a2:	24 2f       	mov	r18, r20
 4a4:	35 2f       	mov	r19, r21
 4a6:	46 2f       	mov	r20, r22
 4a8:	57 2f       	mov	r21, r23
 4aa:	68 2f       	mov	r22, r24
 4ac:	79 2f       	mov	r23, r25
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixSetRow64(3, pgm_read_64(&Atoz['J' - 65]));
 4b4:	80 eb       	ldi	r24, 0xB0	; 176
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pgm_read_64>
 4bc:	02 2f       	mov	r16, r18
 4be:	13 2f       	mov	r17, r19
 4c0:	24 2f       	mov	r18, r20
 4c2:	35 2f       	mov	r19, r21
 4c4:	46 2f       	mov	r20, r22
 4c6:	57 2f       	mov	r21, r23
 4c8:	68 2f       	mov	r22, r24
 4ca:	79 2f       	mov	r23, r25
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 53 03 	call	0x6a6	; 0x6a6 <MAX7219_MatrixSetRow64>
		MAX7219_MatrixUpdate();
 4d2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	83 e2       	ldi	r24, 0x23	; 35
 4da:	94 ef       	ldi	r25, 0xF4	; 244
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e6:	00 00       	nop
 4e8:	c8 e1       	ldi	r28, 0x18	; 24
 4ea:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(5000);
		
		for(int i = 0; i < 24; i++)
		{
			MAX7219_MatrixLShift(1);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 c0 03 	call	0x780	; 0x780 <MAX7219_MatrixLShift>
			MAX7219_MatrixUpdate();
 4f2:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	81 ee       	ldi	r24, 0xE1	; 225
 4fa:	94 e0       	ldi	r25, 0x04	; 4
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 504:	00 c0       	rjmp	.+0      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 506:	00 00       	nop
 508:	21 97       	sbiw	r28, 0x01	; 1
		MAX7219_MatrixSetRow64(2, pgm_read_64(&Atoz['Y' - 65]));
		MAX7219_MatrixSetRow64(3, pgm_read_64(&Atoz['J' - 65]));
		MAX7219_MatrixUpdate();
		_delay_ms(5000);
		
		for(int i = 0; i < 24; i++)
 50a:	81 f7       	brne	.-32     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 50c:	c8 e1       	ldi	r28, 0x18	; 24
 50e:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(100);
		}
						
		for(int i = 0; i < 24; i++)
		{
			MAX7219_MatrixRShift(1);
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 8e 03 	call	0x71c	; 0x71c <MAX7219_MatrixRShift>
			MAX7219_MatrixUpdate();
 516:	0e 94 f7 03 	call	0x7ee	; 0x7ee <MAX7219_MatrixUpdate>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	81 ee       	ldi	r24, 0xE1	; 225
 51e:	94 e0       	ldi	r25, 0x04	; 4
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
 52c:	21 97       	sbiw	r28, 0x01	; 1
			MAX7219_MatrixLShift(1);
			MAX7219_MatrixUpdate();
			_delay_ms(100);
		}
						
		for(int i = 0; i < 24; i++)
 52e:	81 f7       	brne	.-32     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	83 e2       	ldi	r24, 0x23	; 35
 534:	94 ef       	ldi	r25, 0xF4	; 244
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 540:	00 00       	nop
 542:	dc ce       	rjmp	.-584    	; 0x2fc <main+0x8>

00000544 <MAX7219_Tx>:
	MAX7219_PORT |= _BV(MAX7219_LOAD);
}

static void MAX7219_Tx(uint8_t data)
{
	SPDR = data;
 544:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
 546:	0d b4       	in	r0, 0x2d	; 45
 548:	07 fe       	sbrs	r0, 7
 54a:	fd cf       	rjmp	.-6      	; 0x546 <MAX7219_Tx+0x2>
}
 54c:	08 95       	ret

0000054e <MAX7219_Init>:
static void MAX7219_Tx(uint8_t data);

void MAX7219_Init()
{
	/* SPI MOSI, SCK, SS Output */
	MAX7219_DDR |= _BV(MAX7219_DIN) | _BV(MAX7219_CLK) | _BV(MAX7219_LOAD);
 54e:	84 b1       	in	r24, 0x04	; 4
 550:	8c 62       	ori	r24, 0x2C	; 44
 552:	84 b9       	out	0x04, r24	; 4
	MAX7219_PORT &= ~_BV(MAX7219_LOAD);
}

static void MAX7219_Deselect()
{
	MAX7219_PORT |= _BV(MAX7219_LOAD);
 554:	2a 9a       	sbi	0x05, 2	; 5
	
	/* Deselect SS */
	MAX7219_Deselect();
	
	/* MISO Input + Pullup */
	MAX7219_DDR &= ~_BV(MAX7219_MISO);
 556:	24 98       	cbi	0x04, 4	; 4
	MAX7219_PORT |= _BV(MAX7219_MISO);
 558:	2c 9a       	sbi	0x05, 4	; 5
	
	/* Master mode + Enable, F_CPU/4 =  4MHz */
	SPCR |= (_BV(MSTR) | _BV(SPE));
 55a:	8c b5       	in	r24, 0x2c	; 44
 55c:	80 65       	ori	r24, 0x50	; 80
 55e:	8c bd       	out	0x2c, r24	; 44
 560:	08 95       	ret

00000562 <MAX7219_Write>:
	SPDR = data;
	loop_until_bit_is_set(SPSR, SPIF);
}

void MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
	if(index >= MAX7219_IC_NUM) return;
 56e:	84 30       	cpi	r24, 0x04	; 4
 570:	48 f5       	brcc	.+82     	; 0x5c4 <MAX7219_Write+0x62>
 572:	f4 2e       	mov	r15, r20
 574:	e6 2e       	mov	r14, r22
	SPCR |= (_BV(MSTR) | _BV(SPE));
}

static void MAX7219_Select()
{	
	MAX7219_PORT &= ~_BV(MAX7219_LOAD);
 576:	2a 98       	cbi	0x05, 2	; 5
	if(index >= MAX7219_IC_NUM) return;
	
	MAX7219_Select();
	
	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 578:	08 2f       	mov	r16, r24
 57a:	10 e0       	ldi	r17, 0x00	; 0
 57c:	03 30       	cpi	r16, 0x03	; 3
 57e:	11 05       	cpc	r17, r1
 580:	5c f4       	brge	.+22     	; 0x598 <MAX7219_Write+0x36>
 582:	e8 01       	movw	r28, r16
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 a2 02 	call	0x544	; 0x544 <MAX7219_Tx>
		MAX7219_Tx(MAX7219_REG_NOOP);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 a2 02 	call	0x544	; 0x544 <MAX7219_Tx>
	if(index >= MAX7219_IC_NUM) return;
	
	MAX7219_Select();
	
	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 590:	21 96       	adiw	r28, 0x01	; 1
 592:	c3 30       	cpi	r28, 0x03	; 3
 594:	d1 05       	cpc	r29, r1
 596:	b1 f7       	brne	.-20     	; 0x584 <MAX7219_Write+0x22>
		MAX7219_Tx(MAX7219_REG_NOOP);
		MAX7219_Tx(MAX7219_REG_NOOP);
	}	
	
	/* Write register */
	MAX7219_Tx(reg);
 598:	8e 2d       	mov	r24, r14
 59a:	0e 94 a2 02 	call	0x544	; 0x544 <MAX7219_Tx>
	MAX7219_Tx(data);
 59e:	8f 2d       	mov	r24, r15
 5a0:	0e 94 a2 02 	call	0x544	; 0x544 <MAX7219_Tx>
	
	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 5a4:	10 16       	cp	r1, r16
 5a6:	11 06       	cpc	r1, r17
 5a8:	64 f4       	brge	.+24     	; 0x5c2 <MAX7219_Write+0x60>
 5aa:	c0 e0       	ldi	r28, 0x00	; 0
 5ac:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	0e 94 a2 02 	call	0x544	; 0x544 <MAX7219_Tx>
		MAX7219_Tx(MAX7219_REG_NOOP);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0e 94 a2 02 	call	0x544	; 0x544 <MAX7219_Tx>
	/* Write register */
	MAX7219_Tx(reg);
	MAX7219_Tx(data);
	
	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 5ba:	21 96       	adiw	r28, 0x01	; 1
 5bc:	0c 17       	cp	r16, r28
 5be:	1d 07       	cpc	r17, r29
 5c0:	b1 f7       	brne	.-20     	; 0x5ae <MAX7219_Write+0x4c>
	MAX7219_PORT &= ~_BV(MAX7219_LOAD);
}

static void MAX7219_Deselect()
{
	MAX7219_PORT |= _BV(MAX7219_LOAD);
 5c2:	2a 9a       	sbi	0x05, 2	; 5
		MAX7219_Tx(MAX7219_REG_NOOP);
		MAX7219_Tx(MAX7219_REG_NOOP);
	}
	
	MAX7219_Deselect();	
}
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	ff 90       	pop	r15
 5ce:	ef 90       	pop	r14
 5d0:	08 95       	ret

000005d2 <MAX7219_Digit>:

void MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 5d2:	84 30       	cpi	r24, 0x04	; 4
 5d4:	28 f4       	brcc	.+10     	; 0x5e0 <MAX7219_Digit+0xe>
	if(digit > 0x07) return;
 5d6:	68 30       	cpi	r22, 0x08	; 8
 5d8:	18 f4       	brcc	.+6      	; 0x5e0 <MAX7219_Digit+0xe>
	
	MAX7219_Write(index, digit+1, value);
 5da:	6f 5f       	subi	r22, 0xFF	; 255
 5dc:	0e 94 b1 02 	call	0x562	; 0x562 <MAX7219_Write>
 5e0:	08 95       	ret

000005e2 <MAX7219_Decode>:
}

void MAX7219_Decode(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 5e2:	84 30       	cpi	r24, 0x04	; 4
 5e4:	20 f4       	brcc	.+8      	; 0x5ee <MAX7219_Decode+0xc>
 5e6:	46 2f       	mov	r20, r22
	
	MAX7219_Write(index, MAX7219_REG_DECODE, value);
 5e8:	69 e0       	ldi	r22, 0x09	; 9
 5ea:	0e 94 b1 02 	call	0x562	; 0x562 <MAX7219_Write>
 5ee:	08 95       	ret

000005f0 <MAX7219_Intensity>:
}

void MAX7219_Intensity(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 5f0:	84 30       	cpi	r24, 0x04	; 4
 5f2:	38 f4       	brcc	.+14     	; 0x602 <MAX7219_Intensity+0x12>
	if(value > 0x0F) value = 0x0F;
	
	MAX7219_Write(index, MAX7219_REG_INTENSITY, value);
 5f4:	46 2f       	mov	r20, r22
 5f6:	60 31       	cpi	r22, 0x10	; 16
 5f8:	08 f0       	brcs	.+2      	; 0x5fc <MAX7219_Intensity+0xc>
 5fa:	4f e0       	ldi	r20, 0x0F	; 15
 5fc:	6a e0       	ldi	r22, 0x0A	; 10
 5fe:	0e 94 b1 02 	call	0x562	; 0x562 <MAX7219_Write>
 602:	08 95       	ret

00000604 <MAX7219_ScanLimit>:
}

void MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 604:	84 30       	cpi	r24, 0x04	; 4
 606:	38 f4       	brcc	.+14     	; 0x616 <MAX7219_ScanLimit+0x12>
	if(value > 0x07) value = 0x07;
	
	MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value);
 608:	46 2f       	mov	r20, r22
 60a:	68 30       	cpi	r22, 0x08	; 8
 60c:	08 f0       	brcs	.+2      	; 0x610 <MAX7219_ScanLimit+0xc>
 60e:	47 e0       	ldi	r20, 0x07	; 7
 610:	6b e0       	ldi	r22, 0x0B	; 11
 612:	0e 94 b1 02 	call	0x562	; 0x562 <MAX7219_Write>
 616:	08 95       	ret

00000618 <MAX7219_ShutDown>:
}

void MAX7219_ShutDown(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 618:	84 30       	cpi	r24, 0x04	; 4
 61a:	30 f4       	brcc	.+12     	; 0x628 <MAX7219_ShutDown+0x10>
	if(value > 0x01) value = 0x01;
	
	MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value);	
 61c:	46 2f       	mov	r20, r22
 61e:	61 11       	cpse	r22, r1
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	6c e0       	ldi	r22, 0x0C	; 12
 624:	0e 94 b1 02 	call	0x562	; 0x562 <MAX7219_Write>
 628:	08 95       	ret

0000062a <MAX7219_Test>:
}

void MAX7219_Test(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 62a:	84 30       	cpi	r24, 0x04	; 4
 62c:	30 f4       	brcc	.+12     	; 0x63a <MAX7219_Test+0x10>
	if(value > 0x01) value = 0x01;
	
	MAX7219_Write(index, MAX7219_REG_TEST, value);
 62e:	46 2f       	mov	r20, r22
 630:	61 11       	cpse	r22, r1
 632:	41 e0       	ldi	r20, 0x01	; 1
 634:	6f e0       	ldi	r22, 0x0F	; 15
 636:	0e 94 b1 02 	call	0x562	; 0x562 <MAX7219_Write>
 63a:	08 95       	ret

0000063c <MAX7219_MatrixClear>:
	}
}

void MAX7219_MatrixSetPixel(uint8_t index, uint8_t digit, uint8_t row)
{
	FrameBuffer[index][digit] = row;
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	48 e0       	ldi	r20, 0x08	; 8
 642:	84 9f       	mul	r24, r20
 644:	c0 01       	movw	r24, r0
 646:	11 24       	eor	r1, r1
 648:	80 50       	subi	r24, 0x00	; 0
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	fc 01       	movw	r30, r24
 64e:	e2 0f       	add	r30, r18
 650:	f3 1f       	adc	r31, r19
 652:	10 82       	st	Z, r1
 654:	2f 5f       	subi	r18, 0xFF	; 255
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	28 30       	cpi	r18, 0x08	; 8
 65a:	31 05       	cpc	r19, r1
 65c:	b9 f7       	brne	.-18     	; 0x64c <MAX7219_MatrixClear+0x10>
 65e:	08 95       	ret

00000660 <MAX7219_MatrixInit>:
 660:	cf 93       	push	r28
 662:	0e 94 a7 02 	call	0x54e	; 0x54e <MAX7219_Init>
 666:	c0 e0       	ldi	r28, 0x00	; 0
 668:	8c 2f       	mov	r24, r28
 66a:	0e 94 1e 03 	call	0x63c	; 0x63c <MAX7219_MatrixClear>
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	8c 2f       	mov	r24, r28
 672:	0e 94 0c 03 	call	0x618	; 0x618 <MAX7219_ShutDown>
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	8c 2f       	mov	r24, r28
 67a:	0e 94 15 03 	call	0x62a	; 0x62a <MAX7219_Test>
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	8c 2f       	mov	r24, r28
 682:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MAX7219_Decode>
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	8c 2f       	mov	r24, r28
 68a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <MAX7219_Intensity>
 68e:	67 e0       	ldi	r22, 0x07	; 7
 690:	8c 2f       	mov	r24, r28
 692:	0e 94 02 03 	call	0x604	; 0x604 <MAX7219_ScanLimit>
 696:	8c 2f       	mov	r24, r28
 698:	0e 94 1e 03 	call	0x63c	; 0x63c <MAX7219_MatrixClear>
 69c:	cf 5f       	subi	r28, 0xFF	; 255
 69e:	c4 30       	cpi	r28, 0x04	; 4
 6a0:	19 f7       	brne	.-58     	; 0x668 <MAX7219_MatrixInit+0x8>
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <MAX7219_MatrixSetRow64>:
 6a6:	bf 92       	push	r11
 6a8:	cf 92       	push	r12
 6aa:	df 92       	push	r13
 6ac:	ef 92       	push	r14
 6ae:	ff 92       	push	r15
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	d2 2f       	mov	r29, r18
 6ba:	c3 2f       	mov	r28, r19
 6bc:	c4 2e       	mov	r12, r20
 6be:	b5 2e       	mov	r11, r21
 6c0:	d6 2e       	mov	r13, r22
 6c2:	97 2f       	mov	r25, r23
 6c4:	e7 e0       	ldi	r30, 0x07	; 7
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	48 e0       	ldi	r20, 0x08	; 8
 6ca:	84 9f       	mul	r24, r20
 6cc:	90 01       	movw	r18, r0
 6ce:	11 24       	eor	r1, r1
 6d0:	d9 01       	movw	r26, r18
 6d2:	a0 50       	subi	r26, 0x00	; 0
 6d4:	bf 4f       	sbci	r27, 0xFF	; 255
 6d6:	7d 01       	movw	r14, r26
 6d8:	97 01       	movw	r18, r14
 6da:	2e 0f       	add	r18, r30
 6dc:	3f 1f       	adc	r19, r31
 6de:	d9 01       	movw	r26, r18
 6e0:	0c 93       	st	X, r16
 6e2:	20 2f       	mov	r18, r16
 6e4:	31 2f       	mov	r19, r17
 6e6:	4d 2f       	mov	r20, r29
 6e8:	5c 2f       	mov	r21, r28
 6ea:	6c 2d       	mov	r22, r12
 6ec:	7b 2d       	mov	r23, r11
 6ee:	8d 2d       	mov	r24, r13
 6f0:	08 e0       	ldi	r16, 0x08	; 8
 6f2:	0e 94 28 04 	call	0x850	; 0x850 <__lshrdi3>
 6f6:	02 2f       	mov	r16, r18
 6f8:	13 2f       	mov	r17, r19
 6fa:	d4 2f       	mov	r29, r20
 6fc:	c5 2f       	mov	r28, r21
 6fe:	c6 2e       	mov	r12, r22
 700:	b7 2e       	mov	r11, r23
 702:	d8 2e       	mov	r13, r24
 704:	31 97       	sbiw	r30, 0x01	; 1
 706:	40 f7       	brcc	.-48     	; 0x6d8 <MAX7219_MatrixSetRow64+0x32>
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	1f 91       	pop	r17
 70e:	0f 91       	pop	r16
 710:	ff 90       	pop	r15
 712:	ef 90       	pop	r14
 714:	df 90       	pop	r13
 716:	cf 90       	pop	r12
 718:	bf 90       	pop	r11
 71a:	08 95       	ret

0000071c <MAX7219_MatrixRShift>:

void MAX7219_MatrixRShift(uint8_t step)
{
	uint8_t msbD0, msbD1, msbD2, msbD3;	
	
	for(int i=0; i < 8; i++)
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	90 e0       	ldi	r25, 0x00	; 0
	{				
		msbD0 = ((FrameBuffer[0][i] & 0x80) >> 7);		
 720:	fc 01       	movw	r30, r24
 722:	e0 50       	subi	r30, 0x00	; 0
 724:	ff 4f       	sbci	r31, 0xFF	; 255
 726:	30 81       	ld	r19, Z
		FrameBuffer[0][i] = FrameBuffer[0][i] << 1;
 728:	20 81       	ld	r18, Z
 72a:	22 0f       	add	r18, r18
 72c:	20 83       	st	Z, r18
		
		msbD1 = ((FrameBuffer[1][i] & 0x80) >> 7);
 72e:	20 85       	ldd	r18, Z+8	; 0x08
		FrameBuffer[1][i] = FrameBuffer[1][i] << 1;
 730:	40 85       	ldd	r20, Z+8	; 0x08
 732:	44 0f       	add	r20, r20
 734:	40 87       	std	Z+8, r20	; 0x08
		FrameBuffer[1][i] |= msbD0;		
 736:	40 85       	ldd	r20, Z+8	; 0x08
 738:	33 1f       	adc	r19, r19
 73a:	33 27       	eor	r19, r19
 73c:	33 1f       	adc	r19, r19
 73e:	34 2b       	or	r19, r20
 740:	30 87       	std	Z+8, r19	; 0x08
		
		msbD2 = ((FrameBuffer[2][i] & 0x80) >> 7);
 742:	30 89       	ldd	r19, Z+16	; 0x10
		FrameBuffer[2][i] = FrameBuffer[2][i] << 1;
 744:	40 89       	ldd	r20, Z+16	; 0x10
 746:	44 0f       	add	r20, r20
 748:	40 8b       	std	Z+16, r20	; 0x10
		FrameBuffer[2][i] |= msbD1;		
 74a:	40 89       	ldd	r20, Z+16	; 0x10
 74c:	22 1f       	adc	r18, r18
 74e:	22 27       	eor	r18, r18
 750:	22 1f       	adc	r18, r18
 752:	24 2b       	or	r18, r20
 754:	20 8b       	std	Z+16, r18	; 0x10
		
		msbD3 = ((FrameBuffer[3][i] & 0x80) >> 7);
 756:	20 8d       	ldd	r18, Z+24	; 0x18
		FrameBuffer[3][i] = FrameBuffer[3][i] << 1;
 758:	40 8d       	ldd	r20, Z+24	; 0x18
 75a:	44 0f       	add	r20, r20
 75c:	40 8f       	std	Z+24, r20	; 0x18
		FrameBuffer[3][i] |= msbD2;					
 75e:	40 8d       	ldd	r20, Z+24	; 0x18
 760:	33 1f       	adc	r19, r19
 762:	33 27       	eor	r19, r19
 764:	33 1f       	adc	r19, r19
 766:	34 2b       	or	r19, r20
 768:	30 8f       	std	Z+24, r19	; 0x18
		FrameBuffer[0][i] |= msbD3;
 76a:	30 81       	ld	r19, Z
 76c:	22 1f       	adc	r18, r18
 76e:	22 27       	eor	r18, r18
 770:	22 1f       	adc	r18, r18
 772:	23 2b       	or	r18, r19
 774:	20 83       	st	Z, r18

void MAX7219_MatrixRShift(uint8_t step)
{
	uint8_t msbD0, msbD1, msbD2, msbD3;	
	
	for(int i=0; i < 8; i++)
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	88 30       	cpi	r24, 0x08	; 8
 77a:	91 05       	cpc	r25, r1
 77c:	89 f6       	brne	.-94     	; 0x720 <MAX7219_MatrixRShift+0x4>
		msbD3 = ((FrameBuffer[3][i] & 0x80) >> 7);
		FrameBuffer[3][i] = FrameBuffer[3][i] << 1;
		FrameBuffer[3][i] |= msbD2;					
		FrameBuffer[0][i] |= msbD3;
	}	
}
 77e:	08 95       	ret

00000780 <MAX7219_MatrixLShift>:

void MAX7219_MatrixLShift(uint8_t step)
{
	uint8_t lsbD0, lsbD1, lsbD2, lsbD3;
	
	for(int i=0; i < 8; i++)
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	50 e0       	ldi	r21, 0x00	; 0
	{
		lsbD3 = ((FrameBuffer[3][i] & 0x01) << 7);
 784:	fa 01       	movw	r30, r20
 786:	e0 50       	subi	r30, 0x00	; 0
 788:	ff 4f       	sbci	r31, 0xFF	; 255
 78a:	80 8d       	ldd	r24, Z+24	; 0x18
		FrameBuffer[3][i] = FrameBuffer[3][i] >> 1;
 78c:	90 8d       	ldd	r25, Z+24	; 0x18
 78e:	96 95       	lsr	r25
 790:	90 8f       	std	Z+24, r25	; 0x18
				
		lsbD2 = ((FrameBuffer[2][i] & 0x01) << 7);
 792:	90 89       	ldd	r25, Z+16	; 0x10
		FrameBuffer[2][i] = FrameBuffer[2][i] >> 1;
 794:	20 89       	ldd	r18, Z+16	; 0x10
 796:	26 95       	lsr	r18
 798:	20 8b       	std	Z+16, r18	; 0x10
		FrameBuffer[2][i] |= lsbD3;
 79a:	60 89       	ldd	r22, Z+16	; 0x10
 79c:	70 e8       	ldi	r23, 0x80	; 128
 79e:	87 9f       	mul	r24, r23
 7a0:	90 01       	movw	r18, r0
 7a2:	11 24       	eor	r1, r1
 7a4:	26 2b       	or	r18, r22
 7a6:	20 8b       	std	Z+16, r18	; 0x10
		
		lsbD1 = ((FrameBuffer[1][i] & 0x01) << 7);
 7a8:	80 85       	ldd	r24, Z+8	; 0x08
		FrameBuffer[1][i] = FrameBuffer[1][i] >> 1;
 7aa:	20 85       	ldd	r18, Z+8	; 0x08
 7ac:	26 95       	lsr	r18
 7ae:	20 87       	std	Z+8, r18	; 0x08
		FrameBuffer[1][i] |= lsbD2;
 7b0:	60 85       	ldd	r22, Z+8	; 0x08
 7b2:	70 e8       	ldi	r23, 0x80	; 128
 7b4:	97 9f       	mul	r25, r23
 7b6:	90 01       	movw	r18, r0
 7b8:	11 24       	eor	r1, r1
 7ba:	26 2b       	or	r18, r22
 7bc:	20 87       	std	Z+8, r18	; 0x08
		
		lsbD0 = ((FrameBuffer[0][i] & 0x01) << 7);
 7be:	90 81       	ld	r25, Z
		FrameBuffer[0][i] = FrameBuffer[0][i] >> 1;
 7c0:	20 81       	ld	r18, Z
 7c2:	26 95       	lsr	r18
 7c4:	20 83       	st	Z, r18
		FrameBuffer[0][i] |= lsbD1;
 7c6:	60 81       	ld	r22, Z
 7c8:	70 e8       	ldi	r23, 0x80	; 128
 7ca:	87 9f       	mul	r24, r23
 7cc:	90 01       	movw	r18, r0
 7ce:	11 24       	eor	r1, r1
 7d0:	26 2b       	or	r18, r22
 7d2:	20 83       	st	Z, r18
		FrameBuffer[3][i] |= lsbD0;
 7d4:	20 8d       	ldd	r18, Z+24	; 0x18
 7d6:	30 e8       	ldi	r19, 0x80	; 128
 7d8:	93 9f       	mul	r25, r19
 7da:	c0 01       	movw	r24, r0
 7dc:	11 24       	eor	r1, r1
 7de:	82 2b       	or	r24, r18
 7e0:	80 8f       	std	Z+24, r24	; 0x18

void MAX7219_MatrixLShift(uint8_t step)
{
	uint8_t lsbD0, lsbD1, lsbD2, lsbD3;
	
	for(int i=0; i < 8; i++)
 7e2:	4f 5f       	subi	r20, 0xFF	; 255
 7e4:	5f 4f       	sbci	r21, 0xFF	; 255
 7e6:	48 30       	cpi	r20, 0x08	; 8
 7e8:	51 05       	cpc	r21, r1
 7ea:	61 f6       	brne	.-104    	; 0x784 <MAX7219_MatrixLShift+0x4>
		lsbD0 = ((FrameBuffer[0][i] & 0x01) << 7);
		FrameBuffer[0][i] = FrameBuffer[0][i] >> 1;
		FrameBuffer[0][i] |= lsbD1;
		FrameBuffer[3][i] |= lsbD0;
	}
}
 7ec:	08 95       	ret

000007ee <MAX7219_MatrixUpdate>:

void MAX7219_MatrixUpdate()
{
 7ee:	ef 92       	push	r14
 7f0:	ff 92       	push	r15
 7f2:	0f 93       	push	r16
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 7fa:	00 e0       	ldi	r16, 0x00	; 0
 7fc:	10 e0       	ldi	r17, 0x00	; 0
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <MAX7219_MatrixUpdate+0x34>
	{
		for(int digit = 0; digit < 8; digit++)
		{
			uint8_t row = FrameBuffer[index][digit];
 800:	f7 01       	movw	r30, r14
 802:	ec 0f       	add	r30, r28
 804:	fd 1f       	adc	r31, r29
 806:	40 81       	ld	r20, Z
			MAX7219_Digit(index, digit, row);
 808:	6c 2f       	mov	r22, r28
 80a:	80 2f       	mov	r24, r16
 80c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <MAX7219_Digit>

void MAX7219_MatrixUpdate()
{
	for(int index = 0; index < MAX7219_IC_NUM; index++)
	{
		for(int digit = 0; digit < 8; digit++)
 810:	21 96       	adiw	r28, 0x01	; 1
 812:	c8 30       	cpi	r28, 0x08	; 8
 814:	d1 05       	cpc	r29, r1
 816:	a1 f7       	brne	.-24     	; 0x800 <MAX7219_MatrixUpdate+0x12>
	}
}

void MAX7219_MatrixUpdate()
{
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 818:	0f 5f       	subi	r16, 0xFF	; 255
 81a:	1f 4f       	sbci	r17, 0xFF	; 255
 81c:	04 30       	cpi	r16, 0x04	; 4
 81e:	11 05       	cpc	r17, r1
 820:	71 f0       	breq	.+28     	; 0x83e <MAX7219_MatrixUpdate+0x50>
		FrameBuffer[3][i] |= lsbD0;
	}
}

void MAX7219_MatrixUpdate()
{
 822:	c0 e0       	ldi	r28, 0x00	; 0
 824:	d0 e0       	ldi	r29, 0x00	; 0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
	{
		for(int digit = 0; digit < 8; digit++)
		{
			uint8_t row = FrameBuffer[index][digit];
 826:	c8 01       	movw	r24, r16
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	9c 01       	movw	r18, r24
 836:	20 50       	subi	r18, 0x00	; 0
 838:	3f 4f       	sbci	r19, 0xFF	; 255
 83a:	79 01       	movw	r14, r18
 83c:	e1 cf       	rjmp	.-62     	; 0x800 <MAX7219_MatrixUpdate+0x12>
			MAX7219_Digit(index, digit, row);
		}
	}
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	ff 90       	pop	r15
 848:	ef 90       	pop	r14
 84a:	08 95       	ret

0000084c <__ashrdi3>:
 84c:	97 fb       	bst	r25, 7
 84e:	10 f8       	bld	r1, 0

00000850 <__lshrdi3>:
 850:	16 94       	lsr	r1
 852:	00 08       	sbc	r0, r0
 854:	0f 93       	push	r16
 856:	08 30       	cpi	r16, 0x08	; 8
 858:	98 f0       	brcs	.+38     	; 0x880 <__lshrdi3+0x30>
 85a:	08 50       	subi	r16, 0x08	; 8
 85c:	23 2f       	mov	r18, r19
 85e:	34 2f       	mov	r19, r20
 860:	45 2f       	mov	r20, r21
 862:	56 2f       	mov	r21, r22
 864:	67 2f       	mov	r22, r23
 866:	78 2f       	mov	r23, r24
 868:	89 2f       	mov	r24, r25
 86a:	90 2d       	mov	r25, r0
 86c:	f4 cf       	rjmp	.-24     	; 0x856 <__lshrdi3+0x6>
 86e:	05 94       	asr	r0
 870:	97 95       	ror	r25
 872:	87 95       	ror	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	57 95       	ror	r21
 87a:	47 95       	ror	r20
 87c:	37 95       	ror	r19
 87e:	27 95       	ror	r18
 880:	0a 95       	dec	r16
 882:	aa f7       	brpl	.-22     	; 0x86e <__lshrdi3+0x1e>
 884:	0f 91       	pop	r16
 886:	08 95       	ret

00000888 <memcpy_P>:
 888:	fb 01       	movw	r30, r22
 88a:	dc 01       	movw	r26, r24
 88c:	02 c0       	rjmp	.+4      	; 0x892 <memcpy_P+0xa>
 88e:	05 90       	lpm	r0, Z+
 890:	0d 92       	st	X+, r0
 892:	41 50       	subi	r20, 0x01	; 1
 894:	50 40       	sbci	r21, 0x00	; 0
 896:	d8 f7       	brcc	.-10     	; 0x88e <memcpy_P+0x6>
 898:	08 95       	ret

0000089a <_exit>:
 89a:	f8 94       	cli

0000089c <__stop_program>:
 89c:	ff cf       	rjmp	.-2      	; 0x89c <__stop_program>
